/*
 * Loco REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.24
 * 
 * Generated by: https://openapi-generator.tech
 */

#[allow(unused_imports)]
use std::rc::Rc;

use std::option::Option;

use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method `auth_verify`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AuthVerifyError {
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}


pub async fn auth_verify(configuration: &configuration::Configuration, key: Option<&str>, rw: bool) -> Result<crate::models::Credentials, Error<AuthVerifyError>> {
    let client = &configuration.client;

    let uri_str = format!("{}/auth/verify", configuration.base_path);

    let mut req_builder = if !rw { client.get(uri_str.as_str()) } else { client.post(uri_str.as_str()) };

    if let Some(ref s) = key {
        req_builder = req_builder.query(&[("key", &s.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    if status.is_success() {
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let entity: Option<AuthVerifyError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status, content, entity };
        Err(Error::ResponseError(error))
    }
}

