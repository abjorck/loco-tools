/*
 * Loco REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.24
 * 
 * Generated by: https://openapi-generator.tech
 */

#[allow(unused_imports)]
use std::rc::Rc;

use std::option::Option;

use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method `export_all`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExportAllError {
    Status401(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `export_archive`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExportArchiveError {
    Status401(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `export_locale`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExportLocaleError {
    Status401(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `export_template`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExportTemplateError {
    Status401(),
    UnknownValue(serde_json::Value),
}


    pub async fn export_all(configuration: &configuration::Configuration, ext: &str, format: Option<&str>, filter: Option<&str>, index: Option<&str>, source: Option<&str>, fallback: Option<&str>, order: Option<&str>, printf: Option<&str>, charset: Option<&str>, breaks: Option<&str>, no_comments: Option<bool>, no_folding: Option<bool>, key: Option<&str>) -> Result<String, Error<ExportAllError>> {
        let client = &configuration.client;

        let uri_str = format!("{}/export/all.{ext}", configuration.base_path, ext=crate::apis::urlencode(ext));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = format {
            req_builder = req_builder.query(&[("format", &s.to_string())]);
        }
        if let Some(ref s) = filter {
            req_builder = req_builder.query(&[("filter", &s.to_string())]);
        }
        if let Some(ref s) = index {
            req_builder = req_builder.query(&[("index", &s.to_string())]);
        }
        if let Some(ref s) = source {
            req_builder = req_builder.query(&[("source", &s.to_string())]);
        }
        if let Some(ref s) = fallback {
            req_builder = req_builder.query(&[("fallback", &s.to_string())]);
        }
        if let Some(ref s) = order {
            req_builder = req_builder.query(&[("order", &s.to_string())]);
        }
        if let Some(ref s) = printf {
            req_builder = req_builder.query(&[("printf", &s.to_string())]);
        }
        if let Some(ref s) = charset {
            req_builder = req_builder.query(&[("charset", &s.to_string())]);
        }
        if let Some(ref s) = breaks {
            req_builder = req_builder.query(&[("breaks", &s.to_string())]);
        }
        if let Some(ref s) = no_comments {
            req_builder = req_builder.query(&[("no-comments", &s.to_string())]);
        }
        if let Some(ref s) = no_folding {
            req_builder = req_builder.query(&[("no-folding", &s.to_string())]);
        }
        if let Some(ref s) = key {
            req_builder = req_builder.query(&[("key", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<ExportAllError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn export_archive(configuration: &configuration::Configuration, ext: &str, format: Option<&str>, filter: Option<&str>, index: Option<&str>, source: Option<&str>, namespace: Option<&str>, fallback: Option<&str>, order: Option<&str>, status: Option<&str>, path: Option<&str>, printf: Option<&str>, charset: Option<&str>, breaks: Option<&str>, no_comments: Option<bool>, no_folding: Option<bool>, key: Option<&str>) -> Result<String, Error<ExportArchiveError>> {
        let client = &configuration.client;

        let uri_str = format!("{}/export/archive/{ext}.zip", configuration.base_path, ext=crate::apis::urlencode(ext));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = format {
            req_builder = req_builder.query(&[("format", &s.to_string())]);
        }
        if let Some(ref s) = filter {
            req_builder = req_builder.query(&[("filter", &s.to_string())]);
        }
        if let Some(ref s) = index {
            req_builder = req_builder.query(&[("index", &s.to_string())]);
        }
        if let Some(ref s) = source {
            req_builder = req_builder.query(&[("source", &s.to_string())]);
        }
        if let Some(ref s) = namespace {
            req_builder = req_builder.query(&[("namespace", &s.to_string())]);
        }
        if let Some(ref s) = fallback {
            req_builder = req_builder.query(&[("fallback", &s.to_string())]);
        }
        if let Some(ref s) = order {
            req_builder = req_builder.query(&[("order", &s.to_string())]);
        }
        if let Some(ref s) = status {
            req_builder = req_builder.query(&[("status", &s.to_string())]);
        }
        if let Some(ref s) = path {
            req_builder = req_builder.query(&[("path", &s.to_string())]);
        }
        if let Some(ref s) = printf {
            req_builder = req_builder.query(&[("printf", &s.to_string())]);
        }
        if let Some(ref s) = charset {
            req_builder = req_builder.query(&[("charset", &s.to_string())]);
        }
        if let Some(ref s) = breaks {
            req_builder = req_builder.query(&[("breaks", &s.to_string())]);
        }
        if let Some(ref s) = no_comments {
            req_builder = req_builder.query(&[("no-comments", &s.to_string())]);
        }
        if let Some(ref s) = no_folding {
            req_builder = req_builder.query(&[("no-folding", &s.to_string())]);
        }
        if let Some(ref s) = key {
            req_builder = req_builder.query(&[("key", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<ExportArchiveError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn export_locale(configuration: &configuration::Configuration, locale: &str, ext: &str, format: Option<&str>, filter: Option<&str>, index: Option<&str>, source: Option<&str>, namespace: Option<&str>, fallback: Option<&str>, order: Option<&str>, status: Option<&str>, printf: Option<&str>, charset: Option<&str>, breaks: Option<&str>, no_comments: Option<bool>, no_folding: Option<bool>, key: Option<&str>) -> Result<String, Error<ExportLocaleError>> {
        let client = &configuration.client;

        let uri_str = format!("{}/export/locale/{locale}.{ext}", configuration.base_path, locale=crate::apis::urlencode(locale), ext=crate::apis::urlencode(ext));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = format {
            req_builder = req_builder.query(&[("format", &s.to_string())]);
        }
        if let Some(ref s) = filter {
            req_builder = req_builder.query(&[("filter", &s.to_string())]);
        }
        if let Some(ref s) = index {
            req_builder = req_builder.query(&[("index", &s.to_string())]);
        }
        if let Some(ref s) = source {
            req_builder = req_builder.query(&[("source", &s.to_string())]);
        }
        if let Some(ref s) = namespace {
            req_builder = req_builder.query(&[("namespace", &s.to_string())]);
        }
        if let Some(ref s) = fallback {
            req_builder = req_builder.query(&[("fallback", &s.to_string())]);
        }
        if let Some(ref s) = order {
            req_builder = req_builder.query(&[("order", &s.to_string())]);
        }
        if let Some(ref s) = status {
            req_builder = req_builder.query(&[("status", &s.to_string())]);
        }
        if let Some(ref s) = printf {
            req_builder = req_builder.query(&[("printf", &s.to_string())]);
        }
        if let Some(ref s) = charset {
            req_builder = req_builder.query(&[("charset", &s.to_string())]);
        }
        if let Some(ref s) = breaks {
            req_builder = req_builder.query(&[("breaks", &s.to_string())]);
        }
        if let Some(ref s) = no_comments {
            req_builder = req_builder.query(&[("no-comments", &s.to_string())]);
        }
        if let Some(ref s) = no_folding {
            req_builder = req_builder.query(&[("no-folding", &s.to_string())]);
        }
        if let Some(ref s) = key {
            req_builder = req_builder.query(&[("key", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        let req = req_builder.build()?;
        //println!("{:?}",req.url());
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            Ok(content)
//            serde_json::from_str(&content).map_err(Error::from)
        } else {
//            let entity: Option<ExportLocaleError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity: None };
            Err(Error::ResponseError(error))
        }
    }

    pub async fn export_template(configuration: &configuration::Configuration, ext: &str, format: Option<&str>, filter: Option<&str>, index: Option<&str>, source: Option<&str>, namespace: Option<&str>, fallback: Option<&str>, order: Option<&str>, status: Option<&str>, printf: Option<&str>, charset: Option<&str>, breaks: Option<&str>, no_comments: Option<bool>, no_folding: Option<bool>, key: Option<&str>) -> Result<String, Error<ExportTemplateError>> {
        let client = &configuration.client;

        let uri_str = format!("{}/export/template.{ext}", configuration.base_path, ext=crate::apis::urlencode(ext));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = format {
            req_builder = req_builder.query(&[("format", &s.to_string())]);
        }
        if let Some(ref s) = filter {
            req_builder = req_builder.query(&[("filter", &s.to_string())]);
        }
        if let Some(ref s) = index {
            req_builder = req_builder.query(&[("index", &s.to_string())]);
        }
        if let Some(ref s) = source {
            req_builder = req_builder.query(&[("source", &s.to_string())]);
        }
        if let Some(ref s) = namespace {
            req_builder = req_builder.query(&[("namespace", &s.to_string())]);
        }
        if let Some(ref s) = fallback {
            req_builder = req_builder.query(&[("fallback", &s.to_string())]);
        }
        if let Some(ref s) = order {
            req_builder = req_builder.query(&[("order", &s.to_string())]);
        }
        if let Some(ref s) = status {
            req_builder = req_builder.query(&[("status", &s.to_string())]);
        }
        if let Some(ref s) = printf {
            req_builder = req_builder.query(&[("printf", &s.to_string())]);
        }
        if let Some(ref s) = charset {
            req_builder = req_builder.query(&[("charset", &s.to_string())]);
        }
        if let Some(ref s) = breaks {
            req_builder = req_builder.query(&[("breaks", &s.to_string())]);
        }
        if let Some(ref s) = no_comments {
            req_builder = req_builder.query(&[("no-comments", &s.to_string())]);
        }
        if let Some(ref s) = no_folding {
            req_builder = req_builder.query(&[("no-folding", &s.to_string())]);
        }
        if let Some(ref s) = key {
            req_builder = req_builder.query(&[("key", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }

        let req = req_builder.build()?;
        let resp = client.execute(req).await?;

        let status = resp.status();
        let content = resp.text().await?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<ExportTemplateError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

